import random

class Cell:
    def __init__(self,x,y):
        self.x = y
        self.y = x
        self.number = None
        self.walls = [True,True,True,True]
        self.visited = False
        self.beginning = False
        self.ending = False
        
    def check(self):
        global n
        nb = []
        if self.y>0:
            top = grid[self.x][self.y-1]
        else:
            top = None
        if self.x<n-1:
            right = grid[self.x+1][self.y]
        else:
            right = None
        if self.y<n-1:
            bottom = grid[self.x][self.y+1]
        else:
            bottom = None
        if self.x>0:
            left = grid[self.x-1][self.y]
        else:
            left = None
        if ((top != None) and not top.visited):
            nb.append(top)
        if (right != None and not right.visited):
            nb.append(right)
        if (bottom != None and not bottom.visited):
            nb.append(bottom)
        if (left != None and not left.visited):
            nb.append(left)
            
        if (len(nb)>0):
            return nb.pop(random.randint(0,len(nb)-1))
        else:
            return None

l = 600
n = 3
s = l/n
grid = [[ Cell(i,j) for i in range(n)] for j in range(n)]
stack = []
start = [random.randint(0,n-1),random.randint(0,n-1)]
koniec = [random.randint(0,n-1),random.randint(0,n-1)]
grid[random.randint(0,n-1)][random.randint(0,n-1)].ending = True
current = grid[start[0]][start[1]]
grid[start[0]][start[1]].beginning = True
k = 1
current.number = k
k = k + 1
number_show = False
done = False


def show(grid):
    global current
    global start
    global koniec
    textAlign(CENTER)
    textSize(s/3)
    for i in grid:
        for j in i:
            noStroke()
            if j.beginning:
                fill(0,255,255)
            elif j.ending:
                fill(255,255,0)
            elif j.visited:
                fill(0,0,255)
            else:
                fill(255,0,0)
            square(j.x*s,j.y*s,s)
            if number_show == True:
                if j.number!=None:
                    fill(0)
                    text(j.number, j.x*s+s/2,j.y*s+2*s/3)
            stroke(0)
            strokeWeight(s/20)
            if j.walls[0]:
                line(j.x*s,j.y*s,j.x*s+s,j.y*s)
            if j.walls[1]:
                line(j.x*s+s,j.y*s,j.x*s+s,j.y*s+s)
            if j.walls[2]:
                line(j.x*s,j.y*s+s,j.x*s+s,j.y*s+s)
            if j.walls[3]:
                line(j.x*s,j.y*s,j.x*s,j.y*s+s)
    fill(0,255,0)
    square(current.x*s+s/4,current.y*s+s/4,s/2)


def removeWalls(a,b):
  x = a.x - b.x
  if (x == 1):
    a.walls[3] = False
    b.walls[1] = False
  elif (x == -1):
    a.walls[1] = False
    b.walls[3] = False
  y = a.y - b.y
  if (y == 1):
    a.walls[0] = False
    b.walls[2] = False
  elif (y == -1):
    a.walls[2] = False
    b.walls[0] = False
    
    
def setup():
    size(l,l)
    background(255)
    
def draw():
    global done
    global k
    show(grid)
    global current
    if not done:
        current.visited = True
        #STEP 1
        next = current.check()
        if (next != None):
            next.visited = True
            next.number = k
            k = k + 1
            #STEP 2
            stack.append(current)
            #STEP 3
            removeWalls(current, next)
            #STEP 4
            current = next
        elif (len(stack) > 0):
            current.number = None
            k = k - 1
            current = stack.pop()
        else:
            done = True
    else:
        show(grid)
        if current.ending:
            background(255)
            global l
            textAlign(CENTER)
            textSize(l/4)
            fill(0)
            text('WINNER', l/2, l/2+l/16)
            noLoop()
        

def keyPressed():
    global done
    global number_show
    global current
    if not done:
        if key == 'n':
            if number_show:
                number_show = False
            else:
                number_show = True
    else:
        if key == CODED:
            if keyCode == UP:
                if current.y>0 and not current.walls[0]:
                    current = grid[current.x][current.y-1]
            if keyCode == RIGHT:
                if current.x<n-1 and not current.walls[1]:
                    current = grid[current.x+1][current.y]
            if keyCode == DOWN:
                if current.y<n-1 and not current.walls[2]:
                    current = grid[current.x][current.y+1]
            if keyCode == LEFT:
                if current.x>0 and not current.walls[3]:
                    current = grid[current.x-1][current.y]
    if key =='esc':
        exit()
